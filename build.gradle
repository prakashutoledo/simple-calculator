apply plugin: 'java-library'

project.ext {
	junit_jupiter_version = '5.2.0'
	junit_platform_version = '1.2.0'
	fxMainClass = 'simple.calculator.evaluator.application.JavaFXApplication'
	fxmlMainClass = 'simple.calculator.evaluator.application.JavaFXFxmlApplication'
	swingMainClass = 'simple.calculator.evaluator.application.JavaSwingApplication'
	defaultMainClass = 'simple.calculator.evaluator.InfixEvaluatorDriver'
	swingJarName = project.name + "-swing"
	fxJarName = project.name + "-fx"
	fxmlJarName = project.name + "-fxml"
	mainJarName = project.name + "-main"
}

version = 1.0
sourceCompatibility = 12
targetCompatibility = 12

repositories {
    jcenter()
	mavenCentral()
}

dependencies {	
	testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_jupiter_version}"

	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
}


test {
	useJUnitPlatform()
	
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
   }
}

task(runFXUIMain, dependsOn: 'classes', type: JavaExec, generateRunTaskClosure("${fxMainClass}"))

task(runSwingUIMain, dependsOn: 'classes', type: JavaExec, generateRunTaskClosure("${swingMainClass}"))

task(runMainWithArgs, dependsOn: 'classes', type: JavaExec, generateRunTaskClosure("${defaultMainClass}", 'AUTO'))

task(runMainWithInput, dependsOn: 'classes', type: JavaExec, generateRunTaskClosure("${defaultMainClass}", null, true))

task(runFXFxmlUIMain, dependsOn: 'classes', type: JavaExec, generateRunTaskClosure("${fxmlMainClass}"))

task(createFXJar, dependsOn: 'classes', type: Jar, generateJarTaskClosure("${fxJarName}", "${fxMainClass}"))

task(createFXMLJar, dependsOn: 'classes', type: Jar, generateJarTaskClosure("${fxmlJarName}", "${fxmlMainClass}"))

task(createSwingJar, dependsOn: 'classes', type: Jar, generateJarTaskClosure("${swingJarName}", "${swingMainClass}"))

jar generateJarTaskClosure("${mainJarName}", "${defaultMainClass}")

def generateJarTaskClosure(String jarName, String mainClassName) {
	if(!jarName) {
		throw new NullPointerException("Not a valid jarName")
	}
	
	if(!mainClassName) {
		throw new NullPointerException("Not a valid mainClassName")
	}
	
	return {
		manifest {
    		attributes ('Main-Class': "${mainClassName}",
				'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '))
  		}
  
  		archiveBaseName = "${jarName}"
   		destinationDir = file("${buildDir}/libs")
   		
		from sourceSets.main.output  
	}
}

def generateRunTaskClosure(String mainClassName, String arguments = null, boolean doNeedInput = false) {
	if(!mainClassName) {
		throw new NullPointerException("Invalid main name")
	}
	
	return {
		main = "${mainClassName}"
		classpath =sourceSets.main.runtimeClasspath
		
		if(arguments) {
			args "${arguments}"
		}
		
		if(doNeedInput) {
			standardInput System.in
		}
	}
}

jar.dependsOn 'createFXMLJar', 'createFXJar', 'createSwingJar'

defaultTasks 'clean', 'build', 'runFXUIMain'
