apply plugin: 'java-library'

project.ext {
	junit_jupiter_version = '5.2.0'
	junit_platform_version = '1.2.0'
}


version = 1.0
sourceCompatibility = 12
targetCompatibility = 12


repositories {
    jcenter()
	mavenCentral()
}



dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'
	
	testImplementation (
		"org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}",
		"org.junit.jupiter:junit-jupiter-params:${junit_jupiter_version}",
		"org.junit.platform:junit-platform-launcher:${junit_platform_version}",
		"org.junit.platform:junit-platform-engine:${junit_platform_version}",
		"org.junit.platform:junit-platform-runner:${junit_platform_version}",
		"org.junit.platform:junit-platform-suite-api:${junit_platform_version}"
	)
	
	testRuntimeOnly(
		"org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}",
    )		
}


test {
	useJUnitPlatform()
}

task(runEvaluaterUIMain, dependsOn: 'classes', type: JavaExec) {
	main = 'simple.calculator.evaluator.application.JavaFXFxmlApplication'
	classpath =sourceSets.main.runtimeClasspath
}


/*jar {
  manifest {
    attributes (
    'Main-Class': 'simple.calculator.evaluator.SwingApplication',
	'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '))
  }
  
  archiveBaseName = project.name
  
  //from {
	//configurations.compileClasspath.collect {
		//it.isDirectory() ? it : zipTree(it)
	//}
  //} 
  
  //into ''
  
  from  configurations.compileClasspath  into ''
}*/
defaultTasks 'clean', 'build', 'runEvaluaterUIMain'
