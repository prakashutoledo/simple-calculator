apply plugin: 'java-library'

project.ext {
	junit_jupiter_version = '5.2.0'
	junit_platform_version = '1.2.0'
}


version = 1.0
sourceCompatibility = 12
targetCompatibility = 12


repositories {
    jcenter()
	mavenCentral()
}



dependencies {

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'
	
	testImplementation (
		"org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}",
		"org.junit.jupiter:junit-jupiter-params:${junit_jupiter_version}",
		"org.junit.platform:junit-platform-launcher:${junit_platform_version}",
		"org.junit.platform:junit-platform-engine:${junit_platform_version}",
		"org.junit.platform:junit-platform-runner:${junit_platform_version}",
		"org.junit.platform:junit-platform-suite-api:${junit_platform_version}"
	)
	
	testRuntimeOnly(
		"org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}",
    )		
}


test {
	useJUnitPlatform()
	
	testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
   }
}

task(runFXFxmlUIMain, dependsOn: 'classes', type: JavaExec) {
	main = 'simple.calculator.evaluator.application.JavaFXFxmlApplication'
	classpath =sourceSets.main.runtimeClasspath
}

task(runFXUIMain, dependsOn: 'classes', type: JavaExec) {
	main = 'simple.calculator.evaluator.application.JavaFXApplication'
	classpath =sourceSets.main.runtimeClasspath
}

task(runSwingUIMain, dependsOn: 'classes', type: JavaExec) {
	main = 'simple.calculator.evaluator.application.SwingApplication'
	classpath =sourceSets.main.runtimeClasspath
}

task(runMainWithArgs, dependsOn: 'classes', type: JavaExec) {
	main = 'simple.calculator.evaluator.InfixEvaluatorDriver'
	classpath =sourceSets.main.runtimeClasspath
	args "AUTO"
}

task(runMainWithInput, dependsOn: 'classes', type: JavaExec) {
	main = 'simple.calculator.evaluator.InfixEvaluatorDriver'
	classpath =sourceSets.main.runtimeClasspath
	standardInput System.in
}

task(createFXJar, dependsOn: 'classes', type: Jar) {
  	manifest {
    	attributes ('Main-Class': 'simple.calculator.evaluator.application.JavaFXApplication',
			'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '))
  	}
  
  	archiveBaseName = project.name + "-fx"
   	destinationDir = file("${buildDir}/libs")
   	
	from  sourceSets.main.output  
    
}

task(createFXMLJar, dependsOn: 'classes', type: Jar) {
  	manifest {
    	attributes ('Main-Class': 'simple.calculator.evaluator.application.JavaFXFxmlApplication',
			'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '))
  	}
  
  	archiveBaseName = project.name + "-fxml"
   	destinationDir = file("${buildDir}/libs")
   	
	from sourceSets.main.output  
}

task(createSwingJar, dependsOn: 'classes', type: Jar) {
  	manifest {
    	attributes ('Main-Class': 'simple.calculator.evaluator.application.JavaSwingApplication',
			'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '))
  	}
  
  	archiveBaseName = project.name + "-fxml"
   	destinationDir = file("${buildDir}/libs")
   	
	from sourceSets.main.output  
}

jar {
	manifest {
    	attributes ('Main-Class': 'simple.calculator.evaluator.InfixEvaluatorDriver',
			'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '))
  	}
  
  	archiveBaseName = project.name
   	destinationDir = file("${buildDir}/libs")
   	
	from sourceSets.main.output  
}

jar.dependsOn 'createFXMLJar', 'createFXJar'

defaultTasks 'clean', 'build', 'runFXFxmlUIMain'
